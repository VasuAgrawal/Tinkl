// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinkl.proto

package com.tinkl.tinkl;

/**
 * Protobuf type {@code routeguide.Color}
 */
public  final class Color extends
    com.google.protobuf.GeneratedMessageLite<
        Color, Color.Builder> implements
    // @@protoc_insertion_point(message_implements:routeguide.Color)
    ColorOrBuilder {
  private Color() {
  }
  public static final int R_FIELD_NUMBER = 1;
  private int r_;
  /**
   * <code>optional uint32 r = 1;</code>
   */
  public int getR() {
    return r_;
  }
  /**
   * <code>optional uint32 r = 1;</code>
   */
  private void setR(int value) {
    
    r_ = value;
  }
  /**
   * <code>optional uint32 r = 1;</code>
   */
  private void clearR() {
    
    r_ = 0;
  }

  public static final int G_FIELD_NUMBER = 2;
  private int g_;
  /**
   * <code>optional uint32 g = 2;</code>
   */
  public int getG() {
    return g_;
  }
  /**
   * <code>optional uint32 g = 2;</code>
   */
  private void setG(int value) {
    
    g_ = value;
  }
  /**
   * <code>optional uint32 g = 2;</code>
   */
  private void clearG() {
    
    g_ = 0;
  }

  public static final int B_FIELD_NUMBER = 3;
  private int b_;
  /**
   * <code>optional uint32 b = 3;</code>
   */
  public int getB() {
    return b_;
  }
  /**
   * <code>optional uint32 b = 3;</code>
   */
  private void setB(int value) {
    
    b_ = value;
  }
  /**
   * <code>optional uint32 b = 3;</code>
   */
  private void clearB() {
    
    b_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (r_ != 0) {
      output.writeUInt32(1, r_);
    }
    if (g_ != 0) {
      output.writeUInt32(2, g_);
    }
    if (b_ != 0) {
      output.writeUInt32(3, b_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (r_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, r_);
    }
    if (g_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, g_);
    }
    if (b_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, b_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.tinkl.tinkl.Color parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.tinkl.tinkl.Color parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.tinkl.tinkl.Color parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.tinkl.tinkl.Color parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.tinkl.tinkl.Color parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Color parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.tinkl.tinkl.Color parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Color parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.tinkl.tinkl.Color parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Color parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.tinkl.tinkl.Color prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code routeguide.Color}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.tinkl.tinkl.Color, Builder> implements
      // @@protoc_insertion_point(builder_implements:routeguide.Color)
      com.tinkl.tinkl.ColorOrBuilder {
    // Construct using com.tinkl.tinkl.Color.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional uint32 r = 1;</code>
     */
    public int getR() {
      return instance.getR();
    }
    /**
     * <code>optional uint32 r = 1;</code>
     */
    public Builder setR(int value) {
      copyOnWrite();
      instance.setR(value);
      return this;
    }
    /**
     * <code>optional uint32 r = 1;</code>
     */
    public Builder clearR() {
      copyOnWrite();
      instance.clearR();
      return this;
    }

    /**
     * <code>optional uint32 g = 2;</code>
     */
    public int getG() {
      return instance.getG();
    }
    /**
     * <code>optional uint32 g = 2;</code>
     */
    public Builder setG(int value) {
      copyOnWrite();
      instance.setG(value);
      return this;
    }
    /**
     * <code>optional uint32 g = 2;</code>
     */
    public Builder clearG() {
      copyOnWrite();
      instance.clearG();
      return this;
    }

    /**
     * <code>optional uint32 b = 3;</code>
     */
    public int getB() {
      return instance.getB();
    }
    /**
     * <code>optional uint32 b = 3;</code>
     */
    public Builder setB(int value) {
      copyOnWrite();
      instance.setB(value);
      return this;
    }
    /**
     * <code>optional uint32 b = 3;</code>
     */
    public Builder clearB() {
      copyOnWrite();
      instance.clearB();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:routeguide.Color)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.tinkl.tinkl.Color();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.tinkl.tinkl.Color other = (com.tinkl.tinkl.Color) arg1;
        r_ = visitor.visitInt(r_ != 0, r_,
            other.r_ != 0, other.r_);
        g_ = visitor.visitInt(g_ != 0, g_,
            other.g_ != 0, other.g_);
        b_ = visitor.visitInt(b_ != 0, b_,
            other.b_ != 0, other.b_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                r_ = input.readUInt32();
                break;
              }
              case 16: {

                g_ = input.readUInt32();
                break;
              }
              case 24: {

                b_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.tinkl.tinkl.Color.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:routeguide.Color)
  private static final com.tinkl.tinkl.Color DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Color();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.tinkl.tinkl.Color getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Color> PARSER;

  public static com.google.protobuf.Parser<Color> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

