// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinkl.proto

package com.tinkl.tinkl;

/**
 * Protobuf type {@code routeguide.Sample}
 */
public  final class Sample extends
    com.google.protobuf.GeneratedMessageLite<
        Sample, Sample.Builder> implements
    // @@protoc_insertion_point(message_implements:routeguide.Sample)
    SampleOrBuilder {
  private Sample() {
  }
  public static final int SAMPLE_ID_FIELD_NUMBER = 1;
  private int sampleId_;
  /**
   * <pre>
   * Unique within urination, monotonic
   * </pre>
   *
   * <code>optional int32 sample_id = 1;</code>
   */
  public int getSampleId() {
    return sampleId_;
  }
  /**
   * <pre>
   * Unique within urination, monotonic
   * </pre>
   *
   * <code>optional int32 sample_id = 1;</code>
   */
  private void setSampleId(int value) {
    
    sampleId_ = value;
  }
  /**
   * <pre>
   * Unique within urination, monotonic
   * </pre>
   *
   * <code>optional int32 sample_id = 1;</code>
   */
  private void clearSampleId() {
    
    sampleId_ = 0;
  }

  public static final int TEMPERATURE_FIELD_NUMBER = 2;
  private float temperature_;
  /**
   * <pre>
   * Temperature reading in C
   * </pre>
   *
   * <code>optional float temperature = 2;</code>
   */
  public float getTemperature() {
    return temperature_;
  }
  /**
   * <pre>
   * Temperature reading in C
   * </pre>
   *
   * <code>optional float temperature = 2;</code>
   */
  private void setTemperature(float value) {
    
    temperature_ = value;
  }
  /**
   * <pre>
   * Temperature reading in C
   * </pre>
   *
   * <code>optional float temperature = 2;</code>
   */
  private void clearTemperature() {
    
    temperature_ = 0F;
  }

  public static final int TURBIDITY_FIELD_NUMBER = 3;
  private int turbidity_;
  /**
   * <code>optional int32 turbidity = 3;</code>
   */
  public int getTurbidity() {
    return turbidity_;
  }
  /**
   * <code>optional int32 turbidity = 3;</code>
   */
  private void setTurbidity(int value) {
    
    turbidity_ = value;
  }
  /**
   * <code>optional int32 turbidity = 3;</code>
   */
  private void clearTurbidity() {
    
    turbidity_ = 0;
  }

  public static final int COLOR_FIELD_NUMBER = 4;
  private com.tinkl.tinkl.Color color_;
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  public boolean hasColor() {
    return color_ != null;
  }
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  public com.tinkl.tinkl.Color getColor() {
    return color_ == null ? com.tinkl.tinkl.Color.getDefaultInstance() : color_;
  }
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  private void setColor(com.tinkl.tinkl.Color value) {
    if (value == null) {
      throw new NullPointerException();
    }
    color_ = value;
    
    }
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  private void setColor(
      com.tinkl.tinkl.Color.Builder builderForValue) {
    color_ = builderForValue.build();
    
  }
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  private void mergeColor(com.tinkl.tinkl.Color value) {
    if (color_ != null &&
        color_ != com.tinkl.tinkl.Color.getDefaultInstance()) {
      color_ =
        com.tinkl.tinkl.Color.newBuilder(color_).mergeFrom(value).buildPartial();
    } else {
      color_ = value;
    }
    
  }
  /**
   * <code>optional .routeguide.Color color = 4;</code>
   */
  private void clearColor() {  color_ = null;
    
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (sampleId_ != 0) {
      output.writeInt32(1, sampleId_);
    }
    if (temperature_ != 0F) {
      output.writeFloat(2, temperature_);
    }
    if (turbidity_ != 0) {
      output.writeInt32(3, turbidity_);
    }
    if (color_ != null) {
      output.writeMessage(4, getColor());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (sampleId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, sampleId_);
    }
    if (temperature_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, temperature_);
    }
    if (turbidity_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, turbidity_);
    }
    if (color_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getColor());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.tinkl.tinkl.Sample parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.tinkl.tinkl.Sample parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.tinkl.tinkl.Sample parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.tinkl.tinkl.Sample parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.tinkl.tinkl.Sample parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Sample parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.tinkl.tinkl.Sample parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Sample parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.tinkl.tinkl.Sample parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.tinkl.tinkl.Sample parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.tinkl.tinkl.Sample prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code routeguide.Sample}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.tinkl.tinkl.Sample, Builder> implements
      // @@protoc_insertion_point(builder_implements:routeguide.Sample)
      com.tinkl.tinkl.SampleOrBuilder {
    // Construct using com.tinkl.tinkl.Sample.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Unique within urination, monotonic
     * </pre>
     *
     * <code>optional int32 sample_id = 1;</code>
     */
    public int getSampleId() {
      return instance.getSampleId();
    }
    /**
     * <pre>
     * Unique within urination, monotonic
     * </pre>
     *
     * <code>optional int32 sample_id = 1;</code>
     */
    public Builder setSampleId(int value) {
      copyOnWrite();
      instance.setSampleId(value);
      return this;
    }
    /**
     * <pre>
     * Unique within urination, monotonic
     * </pre>
     *
     * <code>optional int32 sample_id = 1;</code>
     */
    public Builder clearSampleId() {
      copyOnWrite();
      instance.clearSampleId();
      return this;
    }

    /**
     * <pre>
     * Temperature reading in C
     * </pre>
     *
     * <code>optional float temperature = 2;</code>
     */
    public float getTemperature() {
      return instance.getTemperature();
    }
    /**
     * <pre>
     * Temperature reading in C
     * </pre>
     *
     * <code>optional float temperature = 2;</code>
     */
    public Builder setTemperature(float value) {
      copyOnWrite();
      instance.setTemperature(value);
      return this;
    }
    /**
     * <pre>
     * Temperature reading in C
     * </pre>
     *
     * <code>optional float temperature = 2;</code>
     */
    public Builder clearTemperature() {
      copyOnWrite();
      instance.clearTemperature();
      return this;
    }

    /**
     * <code>optional int32 turbidity = 3;</code>
     */
    public int getTurbidity() {
      return instance.getTurbidity();
    }
    /**
     * <code>optional int32 turbidity = 3;</code>
     */
    public Builder setTurbidity(int value) {
      copyOnWrite();
      instance.setTurbidity(value);
      return this;
    }
    /**
     * <code>optional int32 turbidity = 3;</code>
     */
    public Builder clearTurbidity() {
      copyOnWrite();
      instance.clearTurbidity();
      return this;
    }

    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public boolean hasColor() {
      return instance.hasColor();
    }
    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public com.tinkl.tinkl.Color getColor() {
      return instance.getColor();
    }
    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public Builder setColor(com.tinkl.tinkl.Color value) {
      copyOnWrite();
      instance.setColor(value);
      return this;
      }
    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public Builder setColor(
        com.tinkl.tinkl.Color.Builder builderForValue) {
      copyOnWrite();
      instance.setColor(builderForValue);
      return this;
    }
    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public Builder mergeColor(com.tinkl.tinkl.Color value) {
      copyOnWrite();
      instance.mergeColor(value);
      return this;
    }
    /**
     * <code>optional .routeguide.Color color = 4;</code>
     */
    public Builder clearColor() {  copyOnWrite();
      instance.clearColor();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:routeguide.Sample)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.tinkl.tinkl.Sample();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.tinkl.tinkl.Sample other = (com.tinkl.tinkl.Sample) arg1;
        sampleId_ = visitor.visitInt(sampleId_ != 0, sampleId_,
            other.sampleId_ != 0, other.sampleId_);
        temperature_ = visitor.visitFloat(temperature_ != 0F, temperature_,
            other.temperature_ != 0F, other.temperature_);
        turbidity_ = visitor.visitInt(turbidity_ != 0, turbidity_,
            other.turbidity_ != 0, other.turbidity_);
        color_ = visitor.visitMessage(color_, other.color_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                sampleId_ = input.readInt32();
                break;
              }
              case 21: {

                temperature_ = input.readFloat();
                break;
              }
              case 24: {

                turbidity_ = input.readInt32();
                break;
              }
              case 34: {
                com.tinkl.tinkl.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tinkl.tinkl.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.tinkl.tinkl.Sample.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:routeguide.Sample)
  private static final com.tinkl.tinkl.Sample DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Sample();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.tinkl.tinkl.Sample getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Sample> PARSER;

  public static com.google.protobuf.Parser<Sample> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

